// Place your key bindings in this file to overwrite the defaults
[
    {
        "key": "cmd+j",
        "command": "go.toggle.test.file"
    },
    {
        "key": "ctrl+right",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "ctrl+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "cmd+right",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "cmd+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+t",
        "command": "emacs.cursorUp"
    },
    {
        "key": "ctrl+g",
        "command": "emacs.cursorRight"
    },
    {
        "key": "ctrl+z",
        "command": "undo",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+s",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus && !editorTextFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+i",
        "command": "closeFindWidget",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+u ctrl+s",
        "command": "workbench.action.files.save"
    },
    {
        "key": "ctrl+t",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible && !inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.openNextRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.openPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+.",
        "command": "cursorBottom"
    },
    {
        "key": "ctrl+shift+,",
        "command": "cursorTop"
    },
    {
        "key": "f11",
        "command": "workbench.action.toggleZenMode"
    },
    // emacs
    {
        "key": "ctrl+u 1",
        "command": "workbench.action.output.toggleOutput"
    },
    {
        "key": "ctrl+shift+v",
        "command": "emacs.cursorPageUp"
    },
    {
        "key": "ctrl+shift+m",
        "command": "emacs.cursorWordLeft"
    },
    {
        "key": "ctrl+shift+g",
        "command": "emacs.cursorWordRight"
    },
    {
        "key": "ctrl+shift+h",
        "command": "deleteWordLeft",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+d",
        "command": "deleteWordRight",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+u k",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+u ctrl+f",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.quickOpenNavigatePrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "cmd+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+c tab",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+,",
        "command": "editor.action.addSelectionToPreviousFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+.",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+space",
        "command": "emacs.enterMarkMode",
        "when": "editorTextFocus"
    },
    // emacs C-g
    {
        "key": "ctrl+i",
        "command": "emacs.C-g",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+i",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+i",
        "command": "emacs.exitMarkMode",
        "when": "editorTextFocus && editorHasSelection"
    },
    {
        "key": "ctrl+i",
        "command": "closeReferenceSearchEditor",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+i",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+i",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && editorTextFocus"
    },
    {
        "key": "ctrl+i",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && editorFocus"
    },
    {
        "key": "ctrl+i",
        "command": "leaveSnippet",
        "when": "editorTextFocus && inSnippetMode"
    },
    {
        "key": "ctrl+i",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "ctrl+i",
        "command": "closeParameterHints",
        "when": "editorTextFocus && parameterHintsVisible"
    },
    {
        "key": "ctrl+i",
        "command": "hideSuggestWidget",
        "when": "editorTextFocus && suggestWidgetVisible"
    },
    {
        "key": "ctrl+i",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "ctrl+i",
        "command": "closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
        "key": "ctrl+i",
        "command": "closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+i",
        "command": "workbench.action.closeMessages",
        "when": "globalMessageVisible"
    },
    {
        "key": "ctrl+i",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "cmd+t",
        "command": "go.test.previous"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-editor.action.toggleTabFocusMode"
    }
]