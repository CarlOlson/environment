* Utility Functions

#+BEGIN_SRC emacs-lisp
(defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent 1))
  `(when (eq system-type ',type)
     ,@body))

(defun remove-lighter (mode)
  "Remove the lighter from the tray for `mode'."
  (setf (cadr (assoc mode minor-mode-alist)) ""))
#+END_SRC

* Basic Settings

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t
      initial-major-mode     'emacs-lisp-mode
      indent-tabs-mode       nil
      show-paren-mode        t
      tool-bar-mode          nil)

(set-default-font "-mlss-Anonymous Pro-bold-normal-normal-*-18-*-*-*-m-0-iso10646-1")
#+END_SRC

* Interactive Functions
** Formatting

#+BEGIN_SRC emacs-lisp
(defun reindent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))
#+END_SRC

** Navigation

#+BEGIN_SRC emacs-lisp
(defun select-next-window ()
  (interactive)
  (select-window (next-window)))

(defun select-prev-window ()
  (interactive)
  (select-window (previous-window)))
#+END_SRC

* Configuration
** Helm

#+BEGIN_SRC
(require 'helm)
(require 'helm-config)
(helm-mode 1)
(remove-lighter 'helm-mode)
#+END_SRC

** Undo Tree

#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode 1)
(remove-lighter 'undo-tree-mode)
#+END_SRC

** Golden Ratio

#+BEGIN_SRC
(require 'golden-ratio)
(add-to-list 'golden-ratio-extra-commands 'select-next-window)
(add-to-list 'golden-ratio-extra-commands 'quit-window)
(golden-ratio-mode 1)
(remove-lighter 'golden-ratio-mode)
#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'company-mode)
(add-hook 'emacs-lisp-mode-hook 'form-feed-mode)
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(require 'org)

(setq org-babel-default-header-args
      (cons '(:tangle . "yes")
	    (assq-delete-all :tangle org-babel-default-header-args)))
#+END_SRC

* Key Bindings
** Global

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<tab>") 'select-next-window)
(global-set-key (kbd "<home>") 'beginning-of-buffer)
(global-set-key (kbd "<end>") 'end-of-buffer)
(global-set-key (kbd "C-o") 'save-buffer)
(global-set-key (kbd "C-z") 'undo)

(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "<help> a") 'helm-apropos)
#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c C-l") 'eval-buffer)
(define-key emacs-lisp-mode-map (kbd "C-c C-r") 'eval-region)
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-<tab>") nil)
#+END_SRC
