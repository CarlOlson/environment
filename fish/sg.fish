complete -c sg -n "__fish_use_subcommand" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c sg -n "__fish_use_subcommand" -s V -l version -d 'Print version'
complete -c sg -n "__fish_use_subcommand" -f -a "run" -d 'Run one time search or rewrite in command line. (default command)'
complete -c sg -n "__fish_use_subcommand" -f -a "scan" -d 'Scan and rewrite code by configuration'
complete -c sg -n "__fish_use_subcommand" -f -a "test" -d 'Test ast-grep rules'
complete -c sg -n "__fish_use_subcommand" -f -a "new" -d 'Create new ast-grep project or items like rules/tests'
complete -c sg -n "__fish_use_subcommand" -f -a "lsp" -d 'Start language server'
complete -c sg -n "__fish_use_subcommand" -f -a "completions" -d 'Generate shell completion script'
complete -c sg -n "__fish_use_subcommand" -f -a "docs" -d 'Generate rule docs for current configuration. (Not Implemented Yet)'
complete -c sg -n "__fish_use_subcommand" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c sg -n "__fish_seen_subcommand_from run" -s p -l pattern -d 'AST pattern to match' -r
complete -c sg -n "__fish_seen_subcommand_from run" -s r -l rewrite -d 'String to replace the matched AST node' -r
complete -c sg -n "__fish_seen_subcommand_from run" -s l -l lang -d 'The language of the pattern. Supported languages are: [Bash, C, Cpp, CSharp, Css, Dart, Elixir, Go, Haskell, Html, Java, JavaScript, Json, Kotlin, Lua, Php, Python, Ruby, Rust, Scala, Swift, Tsx, TypeScript]' -r
complete -c sg -n "__fish_seen_subcommand_from run" -l no-ignore -d 'Do not respect hidden file system or ignore files (.gitignore, .ignore, etc.)' -r -f -a "{hidden	'Search hidden files and directories. By default, hidden files and directories are skipped',dot	'Don\'t respect .ignore files. This does *not* affect whether ast-grep will ignore files and directories whose names begin with a dot. For that, use --no-ignore hidden',exclude	'Don\'t respect ignore files that are manually configured for the repository such as git\'s \'.git/info/exclude\'',global	'Don\'t respect ignore files that come from "global" sources such as git\'s `core.excludesFile` configuration option (which defaults to `$HOME/.config/git/ignore`)',parent	'Don\'t respect ignore files (.gitignore, .ignore, etc.) in parent directories',vcs	'Don\'t respect version control ignore files (.gitignore, etc.). This implies --no-ignore parent for VCS files. Note that .ignore files will continue to be respected'}"
complete -c sg -n "__fish_seen_subcommand_from run" -l json -d 'Output matches in structured JSON ' -r -f -a "{pretty	'Prints the matches as a pretty-printed JSON array, with indentation and line breaks. This is useful for human readability, but not for parsing by other programs. This is the default value for the `--json` option',stream	'Prints each match as a separate JSON object, followed by a newline character. This is useful for streaming the output to other programs that can read one object per line',compact	'Prints the matches as a single-line JSON array, without any whitespace. This is useful for saving space and minimizing the output size'}"
complete -c sg -n "__fish_seen_subcommand_from run" -l color -d 'Controls output color' -r -f -a "{auto	'Try to use colors, but don\'t force the issue. If the output is piped to another program, or the console isn\'t available on Windows, or if TERM=dumb, or if `NO_COLOR` is defined, for example, then don\'t use colors',always	'Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable (not implemented yet)',ansi	'Ansi is like Always, except it never tries to use anything other than emitting ANSI color codes',never	'Never emit colors'}"
complete -c sg -n "__fish_seen_subcommand_from run" -l heading -d 'Controls whether to print the file name as heading' -r -f -a "{auto	'Print heading for terminal tty but not for piped output',always	'Always print heading regardless of output type',never	'Never print heading regardless of output type'}"
complete -c sg -n "__fish_seen_subcommand_from run" -s A -l after -d 'Show NUM lines after each match' -r
complete -c sg -n "__fish_seen_subcommand_from run" -s B -l before -d 'Show NUM lines before each match' -r
complete -c sg -n "__fish_seen_subcommand_from run" -s C -l context -d 'Show NUM lines around each match' -r
complete -c sg -n "__fish_seen_subcommand_from run" -l debug-query -d 'Print query pattern\'s tree-sitter AST. Requires lang be set explicitly'
complete -c sg -n "__fish_seen_subcommand_from run" -l stdin -d 'Enable search code from StdIn'
complete -c sg -n "__fish_seen_subcommand_from run" -s i -l interactive -d 'Start interactive edit session'
complete -c sg -n "__fish_seen_subcommand_from run" -s U -l update-all -d 'Apply all rewrite without confirmation if true'
complete -c sg -n "__fish_seen_subcommand_from run" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c sg -n "__fish_seen_subcommand_from scan" -s c -l config -d 'Path to ast-grep root config, default is sgconfig.yml' -r -F
complete -c sg -n "__fish_seen_subcommand_from scan" -s r -l rule -d 'Scan the codebase with the single rule located at the path RULE_FILE' -r -F
complete -c sg -n "__fish_seen_subcommand_from scan" -l inline-rules -d 'Scan the codebase with a rule defined by the provided RULE_TEXT' -r
complete -c sg -n "__fish_seen_subcommand_from scan" -l filter -d 'Scan the codebase with rules with ids matching REGEX' -r
complete -c sg -n "__fish_seen_subcommand_from scan" -l format -d 'Output warning/error messages in GitHub Action format' -r -f -a "{github	''}"
complete -c sg -n "__fish_seen_subcommand_from scan" -l report-style -r -f -a "{rich	'Output a richly formatted diagnostic, with source code previews',medium	'Output a condensed diagnostic, with a line number, severity, message and notes (if any)',short	'Output a short diagnostic, with a line number, severity, and message'}"
complete -c sg -n "__fish_seen_subcommand_from scan" -l no-ignore -d 'Do not respect hidden file system or ignore files (.gitignore, .ignore, etc.)' -r -f -a "{hidden	'Search hidden files and directories. By default, hidden files and directories are skipped',dot	'Don\'t respect .ignore files. This does *not* affect whether ast-grep will ignore files and directories whose names begin with a dot. For that, use --no-ignore hidden',exclude	'Don\'t respect ignore files that are manually configured for the repository such as git\'s \'.git/info/exclude\'',global	'Don\'t respect ignore files that come from "global" sources such as git\'s `core.excludesFile` configuration option (which defaults to `$HOME/.config/git/ignore`)',parent	'Don\'t respect ignore files (.gitignore, .ignore, etc.) in parent directories',vcs	'Don\'t respect version control ignore files (.gitignore, etc.). This implies --no-ignore parent for VCS files. Note that .ignore files will continue to be respected'}"
complete -c sg -n "__fish_seen_subcommand_from scan" -l json -d 'Output matches in structured JSON ' -r -f -a "{pretty	'Prints the matches as a pretty-printed JSON array, with indentation and line breaks. This is useful for human readability, but not for parsing by other programs. This is the default value for the `--json` option',stream	'Prints each match as a separate JSON object, followed by a newline character. This is useful for streaming the output to other programs that can read one object per line',compact	'Prints the matches as a single-line JSON array, without any whitespace. This is useful for saving space and minimizing the output size'}"
complete -c sg -n "__fish_seen_subcommand_from scan" -l color -d 'Controls output color' -r -f -a "{auto	'Try to use colors, but don\'t force the issue. If the output is piped to another program, or the console isn\'t available on Windows, or if TERM=dumb, or if `NO_COLOR` is defined, for example, then don\'t use colors',always	'Try very hard to emit colors. This includes emitting ANSI colors on Windows if the console API is unavailable (not implemented yet)',ansi	'Ansi is like Always, except it never tries to use anything other than emitting ANSI color codes',never	'Never emit colors'}"
complete -c sg -n "__fish_seen_subcommand_from scan" -l stdin -d 'Enable search code from StdIn'
complete -c sg -n "__fish_seen_subcommand_from scan" -s i -l interactive -d 'Start interactive edit session'
complete -c sg -n "__fish_seen_subcommand_from scan" -s U -l update-all -d 'Apply all rewrite without confirmation if true'
complete -c sg -n "__fish_seen_subcommand_from scan" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c sg -n "__fish_seen_subcommand_from test" -s c -l config -d 'Path to the root ast-grep config YAML' -r -F
complete -c sg -n "__fish_seen_subcommand_from test" -s t -l test-dir -d 'the directories to search test YAML files' -r -F
complete -c sg -n "__fish_seen_subcommand_from test" -l snapshot-dir -d 'Specify the directory name storing snapshots. Default to __snapshots__' -r -F
complete -c sg -n "__fish_seen_subcommand_from test" -s f -l filter -d 'Only run rule test cases that matches REGEX' -r
complete -c sg -n "__fish_seen_subcommand_from test" -l skip-snapshot-tests -d 'Only check if the test code is valid, without checking rule output. Turn it on when you want to ignore the output of rules. Conflicts with --update-all'
complete -c sg -n "__fish_seen_subcommand_from test" -s U -l update-all -d 'Update the content of all snapshots that have changed in test. Conflicts with --skip-snapshot-tests'
complete -c sg -n "__fish_seen_subcommand_from test" -s i -l interactive -d 'Start an interactive review to update snapshots selectively'
complete -c sg -n "__fish_seen_subcommand_from test" -s h -l help -d 'Print help'
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -s l -l lang -d 'The language of the item to create' -r
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -s b -l base-dir -d 'Create new project/items in the folder specified by this argument' -r -F
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -s y -l yes -d 'Accept all default options without interactive input during creation'
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "project" -d 'Create an new project by scaffolding'
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "rule" -d 'Create a new rule'
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "test" -d 'Create a new test case'
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "util" -d 'Create a new global utility rule'
complete -c sg -n "__fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from project" -s l -l lang -d 'The language of the item to create' -r
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from project" -s b -l base-dir -d 'Create new project/items in the folder specified by this argument' -r -F
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from project" -s y -l yes -d 'Accept all default options without interactive input during creation'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from project" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from rule" -s l -l lang -d 'The language of the item to create' -r
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from rule" -s b -l base-dir -d 'Create new project/items in the folder specified by this argument' -r -F
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from rule" -s y -l yes -d 'Accept all default options without interactive input during creation'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from rule" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from test" -s l -l lang -d 'The language of the item to create' -r
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from test" -s b -l base-dir -d 'Create new project/items in the folder specified by this argument' -r -F
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from test" -s y -l yes -d 'Accept all default options without interactive input during creation'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from test" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from util" -s l -l lang -d 'The language of the item to create' -r
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from util" -s b -l base-dir -d 'Create new project/items in the folder specified by this argument' -r -F
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from util" -s y -l yes -d 'Accept all default options without interactive input during creation'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from util" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "project" -d 'Create an new project by scaffolding'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "rule" -d 'Create a new rule'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "test" -d 'Create a new test case'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "util" -d 'Create a new global utility rule'
complete -c sg -n "__fish_seen_subcommand_from new; and __fish_seen_subcommand_from help; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c sg -n "__fish_seen_subcommand_from lsp" -s c -l config -d 'Path to ast-grep root config, default is sgconfig.yml' -r -F
complete -c sg -n "__fish_seen_subcommand_from lsp" -s h -l help -d 'Print help'
complete -c sg -n "__fish_seen_subcommand_from completions" -s h -l help -d 'Print help'
complete -c sg -n "__fish_seen_subcommand_from docs" -s h -l help -d 'Print help'
complete -c sg -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from scan; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from lsp; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from docs; and not __fish_seen_subcommand_from help" -f -a "run" -d 'Run one time search or rewrite in command line. (default command)'
complete -c sg -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from scan; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from lsp; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from docs; and not __fish_seen_subcommand_from help" -f -a "scan" -d 'Scan and rewrite code by configuration'
complete -c sg -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from scan; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from lsp; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from docs; and not __fish_seen_subcommand_from help" -f -a "test" -d 'Test ast-grep rules'
complete -c sg -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from scan; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from lsp; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from docs; and not __fish_seen_subcommand_from help" -f -a "new" -d 'Create new ast-grep project or items like rules/tests'
complete -c sg -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from scan; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from lsp; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from docs; and not __fish_seen_subcommand_from help" -f -a "lsp" -d 'Start language server'
complete -c sg -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from scan; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from lsp; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from docs; and not __fish_seen_subcommand_from help" -f -a "completions" -d 'Generate shell completion script'
complete -c sg -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from scan; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from lsp; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from docs; and not __fish_seen_subcommand_from help" -f -a "docs" -d 'Generate rule docs for current configuration. (Not Implemented Yet)'
complete -c sg -n "__fish_seen_subcommand_from help; and not __fish_seen_subcommand_from run; and not __fish_seen_subcommand_from scan; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from lsp; and not __fish_seen_subcommand_from completions; and not __fish_seen_subcommand_from docs; and not __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c sg -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util" -f -a "project" -d 'Create an new project by scaffolding'
complete -c sg -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util" -f -a "rule" -d 'Create a new rule'
complete -c sg -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util" -f -a "test" -d 'Create a new test case'
complete -c sg -n "__fish_seen_subcommand_from help; and __fish_seen_subcommand_from new; and not __fish_seen_subcommand_from project; and not __fish_seen_subcommand_from rule; and not __fish_seen_subcommand_from test; and not __fish_seen_subcommand_from util" -f -a "util" -d 'Create a new global utility rule'
